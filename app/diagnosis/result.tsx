// app/diagnosis/result.tsx
import { Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useState } from 'react';
import {
    Image,
    ScrollView,
    Share,
    StyleSheet,
    Text,
    TouchableOpacity,
    View,
} from 'react-native';
import { BORDER_RADIUS, COLORS, FONT_SIZES, SHADOWS, SPACING } from '../../constants/theme';
import { useDiagnosis } from '../../contexts/DiagnosisContext';
import { DiagnosisResult as DiagnosisResultType } from '../../types/types';

export default function DiagnosisResult() {
  const { diagnosisId } = useLocalSearchParams<{ diagnosisId: string }>();
  const router = useRouter();
  const { history } = useDiagnosis();
  const [result, setResult] = useState<DiagnosisResultType | null>(null);

  useEffect(() => {
    if (diagnosisId && history.length > 0) {
      const foundResult = history.find((item) => item.id === diagnosisId);
      if (foundResult) {
        setResult(foundResult);
      }
    }
  }, [diagnosisId, history]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high':
        return COLORS.error;
      case 'moderate':
        return COLORS.warning;
      case 'low':
        return COLORS.success;
      default:
        return COLORS.textMuted;
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'high':
        return 'alert-circle';
      case 'moderate':
        return 'warning';
      case 'low':
        return 'checkmark-circle';
      default:
        return 'information-circle';
    }
  };

  const shareResults = async () => {
    if (!result) return;

    try {
      const message = `PoultryCure Diagnosis Report\n\n` +
        `Disease: ${result.diagnosis}\n` +
        `Confidence: ${result.confidence}%\n` +
        `Severity: ${result.severity.toUpperCase()}\n` +
        `Date: ${new Date(result.date).toLocaleDateString()}\n\n` +
        `Symptoms: ${result.input}\n\n` +
        `Treatment: ${result.treatment || 'See recommendations'}\n\n` +
        `Generated by PoultryCure App`;

      await Share.share({
        message,
        title: 'PoultryCure Diagnosis',
      });
    } catch (error) {
      console.error('Share error:', error);
    }
  };

  const goHome = () => {
  (router as any).push('/(tabs)');
};

  const goToHistory = () => {
    router.push('/(tabs)/history');
  };

  if (!result) {
    return (
      <View style={styles.container}>
        <Ionicons name="alert-circle-outline" size={60} color={COLORS.error} />
        <Text style={styles.errorText}>No diagnosis result found</Text>
        <TouchableOpacity style={styles.homeButton} onPress={goHome}>
          <Ionicons name="home-outline" size={20} color={COLORS.white} />
          <Text style={styles.homeButtonText}>Back to Home</Text>
        </TouchableOpacity>
      </View>
    );
  }

  const confidencePercentage = result.confidence || 0;
  const severityColor = getSeverityColor(result.severity);
  const severityIcon = getSeverityIcon(result.severity);

  return (
    <ScrollView style={styles.scrollView} contentContainerStyle={styles.scrollContent}>
      <View style={styles.header}>
        <View style={[styles.iconContainer, { backgroundColor: `${severityColor}20` }]}>
          <Ionicons name={severityIcon as any} size={50} color={severityColor} />
        </View>
        <Text style={styles.title}>Diagnosis Complete</Text>
      </View>

      {/* Main Result Card */}
      <View style={styles.resultCard}>
        <Text style={styles.diagnosisLabel}>Diagnosis</Text>
        <Text style={styles.diagnosisText}>{result.diagnosis}</Text>

        <View style={styles.metaRow}>
          <View style={styles.metaItem}>
            <Ionicons name="speedometer-outline" size={20} color={COLORS.primary} />
            <Text style={styles.metaLabel}>Confidence</Text>
            <Text style={styles.metaValue}>{confidencePercentage}%</Text>
          </View>

          <View style={styles.divider} />

          <View style={styles.metaItem}>
            <Ionicons name={severityIcon as any} size={20} color={severityColor} />
            <Text style={styles.metaLabel}>Severity</Text>
            <Text style={[styles.metaValue, { color: severityColor }]}>
              {result.severity.toUpperCase()}
            </Text>
          </View>

          <View style={styles.divider} />

          <View style={styles.metaItem}>
            <Ionicons name="calendar-outline" size={20} color={COLORS.primary} />
            <Text style={styles.metaLabel}>Date</Text>
            <Text style={styles.metaValue}>
              {new Date(result.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}
            </Text>
          </View>
        </View>

        {/* Confidence Bar */}
        <View style={styles.confidenceContainer}>
          <View style={styles.confidenceBar}>
            <View
              style={[
                styles.confidenceFill,
                {
                  width: `${confidencePercentage}%`,
                  backgroundColor: confidencePercentage > 70 ? COLORS.success : 
                                   confidencePercentage > 40 ? COLORS.warning : COLORS.error,
                },
              ]}
            />
          </View>
        </View>
      </View>

      {/* Image if available */}
      {result.imageUri && (
        <View style={styles.imageCard}>
          <Text style={styles.sectionTitle}>Analyzed Image</Text>
          <Image source={{ uri: result.imageUri }} style={styles.image} resizeMode="cover" />
        </View>
      )}

      {/* Input/Symptoms */}
      <View style={styles.card}>
        <View style={styles.cardHeader}>
          <Ionicons name="list-outline" size={22} color={COLORS.primary} />
          <Text style={styles.cardTitle}>Symptoms Described</Text>
        </View>
        <Text style={styles.cardContent}>{result.input}</Text>
      </View>

      {/* Treatment */}
      {result.treatment && (
        <View style={styles.card}>
          <View style={styles.cardHeader}>
            <Ionicons name="medical-outline" size={22} color={COLORS.success} />
            <Text style={styles.cardTitle}>Treatment</Text>
          </View>
          <Text style={styles.cardContent}>{result.treatment}</Text>
        </View>
      )}

      {/* Prevention */}
      {result.prevention && (
        <View style={styles.card}>
          <View style={styles.cardHeader}>
            <Ionicons name="shield-checkmark-outline" size={22} color={COLORS.secondary} />
            <Text style={styles.cardTitle}>Prevention</Text>
          </View>
          <Text style={styles.cardContent}>{result.prevention}</Text>
        </View>
      )}

      {/* Recommendations */}
      {result.recommendations && result.recommendations.length > 0 && (
        <View style={styles.card}>
          <View style={styles.cardHeader}>
            <Ionicons name="bulb-outline" size={22} color={COLORS.warning} />
            <Text style={styles.cardTitle}>Recommendations</Text>
          </View>
          {result.recommendations.map((rec, index) => (
            <View key={index} style={styles.recommendationItem}>
              <View style={styles.bullet} />
              <Text style={styles.recommendationText}>{rec}</Text>
            </View>
          ))}
        </View>
      )}

      {/* Warning Banner */}
      <View style={styles.warningBanner}>
        <Ionicons name="warning-outline" size={24} color={COLORS.warning} />
        <Text style={styles.warningText}>
          This is a preliminary diagnosis. Always consult a qualified veterinarian for proper treatment.
        </Text>
      </View>

      {/* Action Buttons */}
      <View style={styles.actionButtons}>
        <TouchableOpacity
          style={[styles.actionButton, styles.shareButton]}
          onPress={shareResults}
          activeOpacity={0.8}
        >
          <Ionicons name="share-social-outline" size={22} color={COLORS.white} />
          <Text style={styles.actionButtonText}>Share Report</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.actionButton, styles.historyButton]}
          onPress={goToHistory}
          activeOpacity={0.8}
        >
          <Ionicons name="time-outline" size={22} color={COLORS.white} />
          <Text style={styles.actionButtonText}>View History</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity style={styles.homeButton} onPress={goHome} activeOpacity={0.8}>
        <Ionicons name="home-outline" size={20} color={COLORS.white} />
        <Text style={styles.homeButtonText}>Back to Home</Text>
      </TouchableOpacity>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  scrollView: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  scrollContent: {
    padding: SPACING.lg,
    paddingBottom: SPACING.xl,
  },
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
    alignItems: 'center',
    justifyContent: 'center',
    padding: SPACING.lg,
  },
  header: {
    alignItems: 'center',
    marginBottom: SPACING.xl,
  },
  iconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: SPACING.md,
    ...SHADOWS.medium,
  },
  title: {
    fontSize: FONT_SIZES.title,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  resultCard: {
    backgroundColor: COLORS.white,
    padding: SPACING.lg,
    borderRadius: BORDER_RADIUS.lg,
    marginBottom: SPACING.lg,
    ...SHADOWS.medium,
  },
  diagnosisLabel: {
    fontSize: FONT_SIZES.sm,
    color: COLORS.textMuted,
    marginBottom: SPACING.xs,
  },
  diagnosisText: {
    fontSize: FONT_SIZES.xxl,
    fontWeight: 'bold',
    color: COLORS.primary,
    marginBottom: SPACING.lg,
  },
  metaRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: SPACING.md,
  },
  metaItem: {
    alignItems: 'center',
    flex: 1,
  },
  metaLabel: {
    fontSize: FONT_SIZES.xs,
    color: COLORS.textMuted,
    marginTop: SPACING.xs,
  },
  metaValue: {
    fontSize: FONT_SIZES.md,
    fontWeight: '600',
    color: COLORS.text,
    marginTop: 2,
  },
  divider: {
    width: 1,
    backgroundColor: COLORS.border,
    marginHorizontal: SPACING.sm,
  },
  confidenceContainer: {
    marginTop: SPACING.sm,
  },
  confidenceBar: {
    height: 8,
    backgroundColor: COLORS.border,
    borderRadius: 4,
    overflow: 'hidden',
  },
  confidenceFill: {
    height: '100%',
    borderRadius: 4,
  },
  imageCard: {
    backgroundColor: COLORS.white,
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    marginBottom: SPACING.lg,
    ...SHADOWS.medium,
  },
  image: {
    width: '100%',
    height: 250,
    borderRadius: BORDER_RADIUS.md,
    marginTop: SPACING.sm,
  },
  card: {
    backgroundColor: COLORS.white,
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.lg,
    marginBottom: SPACING.lg,
    ...SHADOWS.small,
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  cardTitle: {
    fontSize: FONT_SIZES.lg,
    fontWeight: '600',
    color: COLORS.text,
    marginLeft: SPACING.sm,
  },
  sectionTitle: {
    fontSize: FONT_SIZES.lg,
    fontWeight: '600',
    color: COLORS.text,
  },
  cardContent: {
    fontSize: FONT_SIZES.md,
    color: COLORS.textLight,
    lineHeight: 22,
  },
  recommendationItem: {
    flexDirection: 'row',
    marginBottom: SPACING.sm,
    paddingRight: SPACING.sm,
  },
  bullet: {
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: COLORS.primary,
    marginTop: 8,
    marginRight: SPACING.sm,
  },
  recommendationText: {
    flex: 1,
    fontSize: FONT_SIZES.md,
    color: COLORS.textLight,
    lineHeight: 22,
  },
  warningBanner: {
    flexDirection: 'row',
    backgroundColor: '#FFF9E6',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    marginBottom: SPACING.lg,
    borderWidth: 1,
    borderColor: COLORS.warning,
  },
  warningText: {
    flex: 1,
    fontSize: FONT_SIZES.sm,
    color: COLORS.text,
    marginLeft: SPACING.sm,
    lineHeight: 20,
  },
  actionButtons: {
    flexDirection: 'row',
    gap: SPACING.md,
    marginBottom: SPACING.md,
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: SPACING.md,
    borderRadius: BORDER_RADIUS.md,
    ...SHADOWS.small,
  },
  shareButton: {
    backgroundColor: COLORS.secondary,
  },
  historyButton: {
    backgroundColor: COLORS.primary,
  },
  actionButtonText: {
    color: COLORS.white,
    fontSize: FONT_SIZES.md,
    fontWeight: '600',
    marginLeft: SPACING.xs,
  },
  homeButton: {
    flexDirection: 'row',
    backgroundColor: COLORS.primary,
    padding: SPACING.lg,
    borderRadius: BORDER_RADIUS.lg,
    alignItems: 'center',
    justifyContent: 'center',
    ...SHADOWS.medium,
  },
  homeButtonText: {
    color: COLORS.white,
    fontSize: FONT_SIZES.lg,
    fontWeight: '600',
    marginLeft: SPACING.sm,
  },
  errorText: {
    fontSize: FONT_SIZES.lg,
    color: COLORS.error,
    marginTop: SPACING.md,
    marginBottom: SPACING.xl,
    textAlign: 'center',
  },
});